package ua.rozhkov;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;

import java.util.Arrays;
import java.util.Collection;

import static org.junit.Assert.assertEquals;

@RunWith(Parameterized.class)
public class NumberParserTest {

    private String actual;
    private String expected;
    private NumberParser numberParser;

    public NumberParserTest(String actual, String expected) {
        this.actual = actual;
        this.expected = expected;
        this.numberParser = new NumberParser();
    }

    @Parameterized.Parameters
    public static Collection<Object[]> data() {
        return Arrays.asList(new Object[][]{
                {"0", "ноль"},
                {"1", "один"},
                {"2", "два"},
                {"3", "три"},
                {"4", "четыре"},
                {"5", "пять"},
                {"6", "шесть"},
                {"7", "семь"},
                {"8", "восемь"},
                {"9", "девять"},
                {"10", "десять"},
                {"11", "одиннадцать"},
                {"12", "двенадцать"},
                {"13", "тринадцать"},
                {"14", "четырнадцать"},
                {"15", "пятнадцать"},
                {"16", "шестнадцать"},
                {"17", "семнадцать"},
                {"18", "восемнадцать"},
                {"19", "девятнадцать"},
                {"20", "двадцать"},
                {"21", "двадцать один"},
                {"26", "двадцать шесть"},
                {"29", "двадцать девять"},
                {"30", "тридцать"},
                {"40", "сорок"},
                {"50", "пятьдесят"},
                {"60", "шестьдесят"},
                {"70", "семьдесят"},
                {"80", "восемьдесят"},
                {"90", "девяносто"},
                {"100", "сто"},
                {"101", "сто один"},
                {"105", "сто пять"},
                {"120", "сто двадцать"},
                {"155", "сто пятьдесят пять"},
                {"200", "двести"},
                {"300", "триста"},
                {"400", "четыреста"},
                {"500", "пятьсот"},
                {"600", "шестьсот"},
                {"700", "семьсот"},
                {"800", "восемьсот"},
                {"900", "девятьсот"},
                {"1000", "одна тысяча"},
                {"1005", "одна тысяча пять"},
                {"1013", "одна тысяча тринадцать"},
                {"1020", "одна тысяча двадцать"},
                {"1050", "одна тысяча пятьдесят"},
                {"1100", "одна тысяча сто"},
                {"1105", "одна тысяча сто пять"},
                {"1110", "одна тысяча сто десять"},
                {"1115", "одна тысяча сто пятнадцать"},
                {"1200", "одна тысяча двести"},
                {"2000", "две тысячи"},
                {"2001", "две тысячи один"},
                {"2010", "две тысячи десять"},
                {"2015", "две тысячи пятнадцать"},
                {"2020", "две тысячи двадцать"},
                {"2035", "две тысячи тридцать пять"},
                {"2059", "две тысячи пятьдесят девять"},
                {"2100", "две тысячи сто"},
                {"2101", "две тысячи сто один"},
                {"2105", "две тысячи сто пять"},
                {"2210", "две тысячи двести десять"},
                {"2315", "две тысячи триста пятнадцать"},
                {"2820", "две тысячи восемьсот двадцать"},
                {"2999", "две тысячи девятьсот девяносто девять"},
                {"3000", "три тысячи"},
                {"10000", "десять тысяч"},
                {"11000", "одиннадцать тысяч"},
                {"20000", "двадцать тысяч"},
                {"100000", "сто тысяч"},
                {"115000", "сто пятнадцать тысяч"},
                {"120000", "сто двадцать тысяч"},
                {"200000", "двести тысяч"},
                {"999999", "девятьсот девяносто девять тысяч девятьсот девяносто девять"},
                {"1000000", "один миллион"},
                {"10000000", "десять миллионов"},
                {"200000000", "двести миллионов"},
                {"999999999", "девятьсот девяносто девять миллионов девятьсот девяносто девять тысяч девятьсот девяносто девять"},
                {"1000000000", "один миллиард"},
                {"200000000000", "двести миллиардов"},
                {"-69", "минус шестьдесят девять"},
                {"-125", "минус сто двадцать пять"},
                {"-236598", "минус двести тридцать шесть тысяч пятьсот девяносто восемь"},
                {"-1000000", "минус один миллион"},
                {"-1000000000", "минус один миллиард"},
                {"-15", "минус пятнадцать"},
                {"-8", "минус восемь"}
        });
    }

    @Test
    public void parseNumber() throws Exception {
        assertEquals(expected, numberParser.parseNumber(actual));
    }

}